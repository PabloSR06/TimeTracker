@using TimeTracker.Data
@using TimeTracker.Pages.Time;
@using TimeTracker.Pages.Calendar;
@using TimeTracker.Service;
@using TimeTracker.Models;
@inject MySqlService service
@inject LoginState _loginState;
@inject CalendarInput Calendar;


@if (!PopupVisible)
{
    <JointCalendar IsDaySelected="OnSelectedDay"></JointCalendar>

    <div class="history-cnt">
        @if (CheckInTime.isOpen)
        {
            if (CheckInTime.time_table != null)
            {
                <div>
                    <div class="start-cnt border-cnt" style="cursor:auto">
                        <a>@CheckInTime.time_table.start_time</a>
                        <ion-icon name="alarm-outline"></ion-icon>
                    </div>
                    @if (CheckInTime.clockHistories != null)
                    {
                        @foreach (var time in CheckInTime.clockHistories)
                        {
                            <div class="entry-ctn border-cnt">
                                <div>
                                    <a>@TimeSpan.FromMinutes(@time.Minutes).TotalHours.ToString("0.00") h</a>
                                </div>

                                @if (_loginState.projects.TryGetValue(@time.Project_id, out string? projectName))
                                {
                                    <div>
                                        <a>Project: </a>
                                        <a>@projectName</a>
                                    </div>
                                }

                            </div>
                        }
                        <div class="newActivity-cnt border-cnt" @onclick="AddProjectTime">Add Time</div>
                    }
                    <div>

                        @if (!CheckInTime.time_table.isFinish)
                        {
                            <div class="end-btn-cnt border-cnt" @onclick="ClockOut">Finish</div>

                        }
                        else
                        {
                            <div class="end-cnt border-cnt" style="cursor:auto">
                                <a>@CheckInTime.time_table.finish_time</a>
                                <ion-icon name="alarm-outline"></ion-icon>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <a>Algo no cuadra</a>
            }
        }
        else
        {
            <div>
                <div class="start-btn-cnt border-cnt" @onclick="ClockIn">Start</div>
            </div>

        }
    </div>
}
else
{
    <div>
        <AddTime Id="TimeClock_id" Status="OnPopUpChange" />
    </div>
}



@code {

    private bool PopupVisible { get; set; }

    private int TimeClock_id { get; set; }

    private CheckInTime CheckInTime = new CheckInTime();


    private void ClockIn()
    {
        ClockInModel clock_in = new ClockInModel()
            {
                user_id = _loginState.User.Id,
                start_time = DateTime.Now.TimeOfDay,
                date = Calendar.ToDate()
            };

        CheckInTime = service.ClockIn(clock_in).Result;
    }
    private void ClockOut()
    {
        ClockOutModel clockOut = new ClockOutModel()
            {
                user_id = _loginState.User.Id,
                finish_time = DateTime.Now.TimeOfDay,
                date = Calendar.ToDate(),
            };
        CheckInTime = service.ClockOut(clockOut).Result;
    }

    protected override async Task OnInitializedAsync()
    {
        Calendar = new CalendarInput();

        CheckInTime = service.GetClockIn(_loginState.User.Id, Calendar.ToDate());
        StateHasChanged();
    }

    private void AddProjectTime()
    {
        if (CheckInTime.time_table != null)
            TimeClock_id = CheckInTime.time_table.Id;

        PopupVisible = true;
    }

    private void OnPopUpChange(bool inserted)
    {
        PopupVisible = inserted;
        CheckInTime = service.GetClockIn(_loginState.User.Id, Calendar.ToDate());
    }

    private void OnSelectedDay(int day)
    {
        CheckInTime = service.GetClockIn(_loginState.User.Id, Calendar.ToDate(day));
    }

}
