@using TimeTracker.Service;
@using TimeTracker.Models;
@inject MySqlService service;
@inject UserService _userService;
@inject Data.LoginState _loginState;


<div>
    @foreach (var collection in CollectionDictionary)
    {
        <div>
            <a @onclick="() => LoadColection(collection.Key)">@collection.Value.Name</a>
        </div>

        <br />
        <div>
            <ul>
                @foreach (var project in collection.Value.Projects)
                {
                    <li @onclick="() => LoadProject(project.Id)"> @project.Name</li>
                }
            </ul>
        </div>

    }


    @if (_isLoaded)
    {
        <div>
            <div>
                <div class="search-input">
                    <input @bind-value="SearchText" @bind-value:event="oninput" placeholder="Search by title" />
                </div>
                <div class="search-result">
                    @foreach (var user in FilteredUsers)
                    {
                        <div>
                            <a>@user.Name</a>
                            <a>@user.Email</a>
                        </div>
                    }

                </div>
            </div>
            <style>
                .search-result {
                    max-height: 200px;
                    overflow-y: auto;
                    background-color: dimgrey;
                    position: absolute;
                    vertical-align: top;
                }
            </style>

            <div>
                @foreach (var x in userValue)
                {

                    <div>
                        @if (@Users.TryGetValue(x.User_id, out UserMin user) && user != null)
                        {
                            <a>@user.Name</a>
                            <a>@user.Email</a>
                        }
                    </div>
                }
            </div>
        </div>

    }
</div>




@code {
    private Dictionary<int, CollectionDictionary> CollectionDictionary = new Dictionary<int, CollectionDictionary>();

    private Dictionary<int, UserMin> Users = new Dictionary<int, UserMin>();
    private List<UserMin> UsersList = new List<UserMin>();
    public string SearchText = "";
    List<UserMin> FilteredUsers => UsersList.Where(img => img.Email.ToLower().Contains(SearchText.ToLower()) || img.Name.ToLower().Contains(SearchText.ToLower())).ToList();

    private List<UserHasValue> userValue = new List<UserHasValue>();
    private bool _isLoaded = false;


    protected override async Task OnInitializedAsync()
    {
        CollectionDictionary = service.GetColectionDictionary();
        Users = _userService.GetAllUsers();

        UsersList = _userService.GetAllUsersList();
    }


    private void LoadProject(int id)
    {
        _isLoaded = true;
        userValue = service.GetProjectUser(id);
    }

    private void LoadColection(int id)
    {
        _isLoaded = true;
        userValue = service.GetCollectionUser(id);
    }
}

