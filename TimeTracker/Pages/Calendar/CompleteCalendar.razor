@using TimeTracker.Models;
@inject CalendarInput Calendar;


<link href="./css/calendar.css" rel="stylesheet" />


<div class="calendar">

    <div class="cln-btn-cnt">
        <div class="direction-cnt" @onclick="DownMonth"><p class="btn-calendarMin">&lt;</p></div>
        <div @onclick="ResetCalendar"><p class="btn-calendarMin"><ion-icon name="today-outline"></ion-icon></p></div>
        <div class="direction-cnt" @onclick="UpMonth"><p class="btn-calendarMin">&gt;</p></div>
    </div>
    <div>
        <div>
            <ul class="days days_name">
                <li>Mon</li>
                <li>Tue</li>
                <li>Wed</li>
                <li>Thu</li>
                <li>Fri</li>
                <li>Sat</li>
                <li>Sun</li>
            </ul>

            @for (int i = 0; i < numberOfWeeks; i++)
            {
                <ul class="days days_number">
                    @for (int j = 0; j < 7; j++)
                    {
                        int currentDay = (i * 7) + j + 1 - firstDayOfMonth;
                        if (currentDay < 1 || currentDay > daysInMonth)
                        {
                            <li></li>
                        }
                        else
                        {
                            if (Calendar.IsToday(currentDay))
                            {
                                <li class="days_selected"><a>@currentDay</a></li>
                            }
                            else
                            {
                                <li><a @onclick="@(() => SelectDay(currentDay))">@currentDay</a></li>
                            }
                        }
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<Boolean> SelectedDay { get; set; }

    private int daysInMonth;
    private int firstDayOfMonth;
    private int numberOfWeeks;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        loadCalendar();
    }
    private void loadCalendar()
    {

        daysInMonth = DateTime.DaysInMonth(Calendar.Year, Calendar.Month);
        firstDayOfMonth = ((int)new DateTime(Calendar.Year, Calendar.Month, 1).DayOfWeek + 6) % 7;
        numberOfWeeks = (int)Math.Ceiling((firstDayOfMonth + daysInMonth) / 7.0);
    }

    private void UpMonth()
    {
        if (Calendar.Month != 12)
        {
            Calendar.Month++;
        }
        else
        {
            Calendar.Month = 1;
            Calendar.Year++;
        }
        loadCalendar();
    }
    private void DownMonth()
    {
        if (Calendar.Month != 1)
        {
            Calendar.Month--;
        }
        else
        {
            Calendar.Month = 12;
            Calendar.Year--;
        }
        loadCalendar();
    }

    private void SelectDay(int day)
    {
        SelectedDay.InvokeAsync(true);
    }

    private void ResetCalendar()
    {
        Calendar = new CalendarInput();
        StateHasChanged();
        SelectedDay.InvokeAsync(true);

    }
}
