@using TimeTracker.Models;

<link href="./css/calendar.css" rel="stylesheet" />





<div class="calendar">
    
    <div class="cnt-calendar" @onclick="DownWeek"><p class="btn-calendarMin">&lt;</p></div>

    <div>
        <div>
            <ul class="days days_name">
                <li>Mon</li>
                <li>Tue</li>
                <li>Wed</li>
                <li>Thu</li>
                <li>Fri</li>
                <li>Sat</li>
                <li>Sun</li>
            </ul>
            <ul class="days days_number">
                @for (int i = 0; i < 7; i++)
                {
                    int currentDay = (InputDate.WeekNumber - 1) * 7 + i + 1 - firstDayOfMonth;

                    if (currentDay < 1 || currentDay > daysInMonth)
                    {
                        <li>x</li>
                    }
                    else
                    {
                        if (InputDate.IsToday(currentDay))
                        {
                            <li class="days_selected"><a>@currentDay</a></li>
                        }
                        else
                        {
                            <li><a @onclick="@(() => SelectDay(currentDay))">@currentDay</a></li>
                        }
                    }

                }
            </ul>
        </div>
        @*<p class="btn-toggleCalendar" @onclick="ToggleCalendar">BIG</p>*@
    </div>
    <div class="cnt-calendar" @onclick="UpWeek"><p class="btn-calendarMin">&gt;</p></div>

</div>

@code {
    [Parameter]
    public CalendarInput InputDate { get; set; }

    [Parameter]
    public EventCallback<Boolean> SelectedDay { get; set; }

    private int daysInMonth;
    private int firstDayOfMonth;
    private int numberOfWeeks;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadWeek();
    }
    private void LoadWeek()
    {

        daysInMonth = DateTime.DaysInMonth(InputDate.Year, InputDate.Month);
        firstDayOfMonth = ((int)new DateTime(InputDate.Year, InputDate.Month, 1).DayOfWeek + 6) % 7;
        numberOfWeeks = (int)Math.Ceiling((firstDayOfMonth + daysInMonth) / 7.0);
    }


    private void UpWeek()
    {
        if (InputDate.WeekNumber == numberOfWeeks)
        {
            InputDate.Month++;
            InputDate.WeekNumber = 1;
            LoadWeek();
        }
        else
        {
            InputDate.WeekNumber++;
        }

    }
    private void DownWeek()
    {
        if (InputDate.WeekNumber == 1)
        {
            InputDate.Month--;

            InputDate.WeekNumber = numberOfWeeks;
            LoadWeek();
        }
        else
        {
            InputDate.WeekNumber--;
        }


    }

    private void SelectDay(int day)
    {
        InputDate.Day = day;
        SelectedDay.InvokeAsync(true);
    }

    private void ToggleCalendar()
    {
        
    }


}
